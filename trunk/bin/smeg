#!/usr/bin/env python

#  Smeg - Simple Menu Editor for GNOME
#
#  Travis Watkins <alleykat@gmail.com>
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#
#  (C) Copyright 2005 Travis Watkins

import os, sys, pickle
cmddir = os.path.split(sys.argv[0])[0]
prefix = os.path.split(cmddir)[0]
if prefix == '': prefix = '.'
libdir = os.path.join(prefix, 'lib/smeg')
sys.path = [libdir] + sys.path

from MenuHandler import MenuHandler
import config

import pygtk
pygtk.require('2.0')
import gtk, gtk.glade, gobject

class Smeg:

    dnd_targets = [('MY_TREE_MODEL_ROW', gtk.TARGET_SAME_APP, 0)]
    menu_path = None
    entry_path = None
    icon_cache = {}

    def __init__(self):
        self.tree = gtk.glade.XML(os.path.join(libdir, 'smeg.glade'))
        self.config = config.Configuration('/apps/smeg')
        self.w = self.tree.get_widget
        self.w('prefcustomtheme').set_group(self.w('prefdefaulttheme'))
        self.handler = MenuHandler(self, self.config)

    def setIcon(self):
        try:
            filename = './smeg.png'
            if not os.path.isfile(filename):
                icondir = prefix
                if not prefix == '.':
                    icondir = os.path.join(prefix, 'share/pixmaps')
                filename = os.path.join(icondir, 'smeg.png')
            self.icon = gtk.gdk.pixbuf_new_from_file(filename)
            self.w('mainwindow').set_icon(self.icon)
            self.w('menudialog').set_icon(self.icon)
            self.w('entrydialog').set_icon(self.icon)
            self.w('preferences').set_icon(self.icon)
        except:
            self.icon = None

    def getIcon(self, name, default='application-default-icon', size=24):
        if name.startswith('debian') and name != 'debian-logo':
            try:
                path = os.path.join('/usr/share/pixmaps', name)
                pb = gtk.gdk.pixbuf_new_from_file_at_size(path, size, size)
            except:
                path = self.handler.getIconPath(default, size)
                if path == None:
                    pb = gtk.gdk.Pixbuf(gtk.gdk.COLORSPACE_RGB, True, 8, size, size)
                    pb.fill(0x00000000)
                else:
                   pb = gtk.gdk.pixbuf_new_from_file_at_size(path, size, size) 
            return pb
        path = self.handler.getIconPath(name, size)
        if path == None:
            path = self.handler.getIconPath(default, size)
        if path == None:
            pb = gtk.gdk.Pixbuf(gtk.gdk.COLORSPACE_RGB, True, 8, size, size)
            pb.fill(0x00000000)
        else:
            pb = gtk.gdk.pixbuf_new_from_file_at_size(path, size, size)
        return pb

    def getEntryIcon(self, entry, size=24):
        return self.getIcon(entry.getIcon(), 'application-default-icon')

    def getMenuIcon(self, menu, size=24, text=False):
        if text:
            return self.getIcon(menu, 'gnome-fs-directory', size)
        if self.icon_cache.has_key(menu.getIcon() + '-' + str(size)):
            return self.icon_cache[menu.getIcon() + '-' + str(size)]
        if len(menu.getIcon()):
            self.icon_cache[menu.getIcon() + '-' + str(size)] = self.getIcon(menu.getIcon(), 'gnome-fs-directory', size)
            return self.icon_cache[menu.getIcon() + '-' + str(size)]
        else:
            return self.getIcon('', 'gnome-fs-directory', size)

    def setupMenusTree(self):
        menus = self.tree.get_widget('menus')
        column = gtk.TreeViewColumn('Visible')

        cell = gtk.CellRendererToggle()
        cell.connect('toggled', self.on_menu_visible_toggled)
        column.pack_start(cell, True)
        column.set_attributes(cell, active=0)
        menus.append_column(column)

        column = gtk.TreeViewColumn('Name')
        column.set_spacing(6)

        cell = gtk.CellRendererPixbuf()
        column.pack_start(cell, False)
        column.set_attributes(cell, pixbuf=1)

        cell = gtk.CellRendererText()
        column.pack_start(cell, True)
        column.set_attributes(cell, text=2)
        menus.append_column(column)
        menus.set_expander_column(column)

        self.menu_store = gtk.TreeStore(bool, gtk.gdk.Pixbuf, str, object)
        menus.set_model(self.menu_store)
        menus.enable_model_drag_dest(self.dnd_targets, gtk.gdk.ACTION_PRIVATE)
#        menus.enable_model_drag_source(gtk.gdk.BUTTON1_MASK, self.dnd_targets,
#            gtk.gdk.ACTION_MOVE | gtk.gdk.ACTION_DEFAULT)
        menus.connect('drag_data_received', self.on_menus_drag_data_received_data)
#        menus.connect('drag_data_get', self.on_menus_drag_data_get_data)

    def setupEntriesTree(self):
        entries = self.tree.get_widget('entries')
        column = gtk.TreeViewColumn('Visible')

        cell = gtk.CellRendererToggle()
        cell.connect('toggled', self.on_entry_visible_toggled)
        column.pack_start(cell, True)
        column.set_attributes(cell, active=0)
        entries.append_column(column)

        column = gtk.TreeViewColumn('Name')
        column.set_spacing(6)

        cell = gtk.CellRendererPixbuf()
        column.pack_start(cell, False)
        column.set_attributes(cell, pixbuf=1)

        cell = gtk.CellRendererText()
        column.pack_start(cell, True)
        column.set_attributes(cell, text=2)
        entries.append_column(column)

        self.entry_store = gtk.ListStore(bool, gtk.gdk.Pixbuf, str, object)
        entries.set_model(self.entry_store)
        entries.enable_model_drag_source(gtk.gdk.BUTTON1_MASK, self.dnd_targets,
            gtk.gdk.ACTION_MOVE | gtk.gdk.ACTION_DEFAULT)
        entries.connect('drag_data_get', self.on_entries_drag_data_get_data)

    def setupMenuDialog(self, menu=None, parent=None):
        self.w('miconbutton').my_icon_name = None
        if menu:
            if menu.Directory:
                entry = menu.Directory.DesktopEntry
                self.w('mnameentry').set_text(entry.getName())
                self.w('mcommententry').set_text(entry.getComment())
                image = gtk.Image()
                pb = self.getMenuIcon(entry, 48)
                image.set_from_pixbuf(pb)
                image.show()
                self.w('miconbutton').my_icon_name = entry.getIcon() 
                self.w('miconbutton').remove(self.w('miconbutton').get_child())
                self.w('miconbutton').add(image)
                if self.icon_cache.has_key(menu.getName()):
                    del self.icon_cache[menu.getName()]
            else:
                self.w('mnameentry').set_text(menu.getName())


        self.w('menudialog').show()
        response = self.w('menudialog').run()
        if response == gtk.RESPONSE_OK:
            if len(self.w('mnameentry').get_text()) > 0:
                if menu:
                    self.handler.saveMenu(menu,
                        self.w('mnameentry').get_text(),
                        self.w('mcommententry').get_text(),
                        self.w('miconbutton').my_icon_name or None
                        )
                elif parent:
                    self.handler.newMenu(parent,
                        self.w('mnameentry').get_text(),
                        self.w('mcommententry').get_text(),
                        self.w('miconbutton').my_icon_name or None
                        )
                gobject.timeout_add(100, self.reloadSmeg)
        self.resetMenuDialog()

    def resetMenuDialog(self):
        self.w('mnameentry').set_text('')
        self.w('mcommententry').set_text('')
        self.w('miconbutton').remove(self.w('miconbutton').get_child())
        self.w('miconbutton').set_label('No Icon')
        self.w('miconbutton').my_icon_name = None
        self.w('menudialog').hide()

    def setupEntryDialog(self, entry=None, parent=None):
        self.w('eiconbutton').my_icon_name = None
        if entry:
            desktop = entry.DesktopEntry
            self.w('enameentry').set_text(desktop.getName())
            self.w('ecommententry').set_text(desktop.getComment())
            self.w('ecommandentry').set_text(desktop.getExec())
            image = gtk.Image()
            pb = self.getEntryIcon(desktop, 48)
            image.set_from_pixbuf(pb)
            image.show()
            self.w('eiconbutton').my_icon_name = desktop.getIcon() 
            self.w('eiconbutton').remove(self.w('eiconbutton').get_child())
            self.w('eiconbutton').add(image)
            if desktop.getTerminal() is True:
                self.w('etermcheck').set_active(1)

        self.w('entrydialog').show()
        response = self.w('entrydialog').run()
        if response == gtk.RESPONSE_OK:
            if len(self.w('enameentry').get_text()) > 0:
                if entry:
                    self.handler.saveEntry(entry, self.w('enameentry').get_text(),
                        self.w('ecommententry').get_text(),
                        self.w('ecommandentry').get_text(),
                        self.w('eiconbutton').my_icon_name or None,
                        self.w('etermcheck').get_active()
                        )
                elif parent:
                    self.handler.newEntry(parent, self.w('enameentry').get_text(),
                        self.w('ecommententry').get_text(),
                        self.w('ecommandentry').get_text(),
                        self.w('eiconbutton').my_icon_name or None,
                        self.w('etermcheck').get_active()
                        )
                gobject.timeout_add(100, self.reloadSmeg)
        self.resetEntryDialog()

    def resetEntryDialog(self):
        self.w('enameentry').set_text('')
        self.w('ecommententry').set_text('')
        self.w('ecommandentry').set_text('')
        self.w('eiconbutton').remove(self.w('eiconbutton').get_child())
        self.w('eiconbutton').set_label('No Icon')
        self.w('eiconbutton').my_icon_name = None
        self.w('etermcheck').set_active(0)
        self.w('entrydialog').hide()

    def getMenus(self):
        self.menu_store.clear()
        self.handler.loadMenus()
        for menu in self.menu_store:
            self.w('menus').expand_to_path(menu.path)
        if self.menu_path != None:
            self.w('menus').expand_to_path(self.menu_path)
            self.w('menus').get_selection().select_path(self.menu_path)

    def getEntries(self, menu):
        self.entry_store.clear()
        entries = self.handler.loadEntries(menu)
        for entry in entries:
            desktop = entry.DesktopEntry
            pixbuf = self.getEntryIcon(desktop)
            show = True
            if entry.Show != True:
                show = False
            self.entry_store.append([show, pixbuf, desktop.getName(), entry])
        if self.entry_path != None:
            self.w('entries').get_selection().select_path(self.entry_path)

    def addMenu(self, entry, depths, depth, show):
        edited = False
        if entry.getName() == 'Applications':
            pixbuf = self.getMenuIcon('gnome-main-menu', text=True)
        else:
            pixbuf = self.getMenuIcon(entry)
        if show != True:
            show = False
        return self.menu_store.append(depths[depth-1], [show, pixbuf, entry.getName(), entry])

    def chooseFile(self, image=False):
        buttons = (gtk.STOCK_CANCEL, gtk.RESPONSE_CANCEL,
            gtk.STOCK_OPEN, gtk.RESPONSE_ACCEPT)
        action = gtk.FILE_CHOOSER_ACTION_OPEN
        file_dialog = gtk.FileChooserDialog(action=action, buttons=buttons)
        if image:
            file_dialog.set_current_folder('/usr/share/pixmaps/')
        response = file_dialog.run()
        if response in (gtk.RESPONSE_ACCEPT, gtk.RESPONSE_OK):
            selected_file = file_dialog.get_filename()
        else:
            selected_file = None
        file_dialog.destroy()
        return selected_file

    def selectFile(self, entry):
        selected_file = self.chooseFile()
        if selected_file:
            entry.set_text(selected_file)

    def selectIcon(self, button):
        selected_file = self.chooseFile(True)
        if selected_file:
            pixbuf = self.getIcon(selected_file, size=48)
            image = gtk.Image()
            image.set_from_pixbuf(pixbuf)
            image.show()
            button.my_icon_name = selected_file
            button.remove(button.get_child())
            button.add(image)

    def reloadSmeg(self, reparse=False):
        self.handler.save()
        if reparse:
            self.handler.parse()
        self.getMenus()
        self.getEntries(self.menu_store[self.menu_path][3])

    def on_miconbutton_clicked(self, button):
        self.selectIcon(button)

    def on_menudialog_delete_event(self, *args):
        self.resetMenuDialog()
        return True

    def on_ecommandbutton_clicked(self, button):
        self.selectFile(self.w('ecommandentry'))

    def on_eiconbutton_clicked(self, button):
        self.selectIcon(button)

    def on_entrydialog_delete_event(self, *args):
        self.resetEntryDialog()
        return True

    def on_menus_drag_data_get_data(self, treeview, context, selection, target_id, etime):
        model, iter = treeview.get_selection().get_selected()
        self.drag_path = self.menu_store.get_path(self.w('menus').get_selection().get_selected()[1])
        path = pickle.dumps(model.get_path(iter))
        selection.set(selection.target, 8, 'menus:::' + path)

    def on_entries_drag_data_get_data(self, treeview, context, selection, target_id, etime):
        model, iter = treeview.get_selection().get_selected()
        self.drag_path = self.menu_store.get_path(self.w('menus').get_selection().get_selected()[1])
        path = pickle.dumps(model.get_path(iter))
        selection.set(selection.target, 8, 'entries:::' + path)

    def on_menus_drag_data_received_data(self, treeview, context, x, y, selection, info, etime):
        model = treeview.get_model()
        source, source_path = selection.data.split(':::', 1)
        source_path = pickle.loads(source_path)
        drop_info = treeview.get_dest_row_at_pos(x, y)
        if drop_info:
            path, position = drop_info
            iter = model.get_iter(path)
            if source == 'entries':
                if model.iter_parent(iter) != None:
                    entry = self.entry_store[source_path][3]
                    self.handler.moveEntry(entry, entry.parent,
                        model[path][3])
            elif source == 'menus':
                menu = self.menu_store[source_path][3]
                print menu.getPath(True, True), model[path][3].getPath(True, True)
                self.handler.moveMenu(menu, model[path][3])
            context.finish(True, True, etime)
            gobject.timeout_add(100, self.reloadSmeg, True)
        return

    def on_menu_visible_toggled(self, cell, path):
        if self.menu_store.iter_parent(self.menu_store.get_iter(path)) != None:
            menu = self.menu_store[path][3]
            if menu.Show != 'Empty':
                self.menu_store[path][0] = not self.menu_store[path][0]
            self.handler.toggleMenuVisible(menu, not self.menu_store[path][0])

    def on_entry_visible_toggled(self, cell, path):
        self.entry_store[path][0] = not self.entry_store[path][0]
        entry = self.entry_store[path][3]
        self.handler.toggleEntryVisible(entry, not self.entry_store[path][0])
        gobject.timeout_add(100, self.reloadSmeg)

    def on_tree_button_press_event(self, treeview, event):
        if event.button == 3:
            x = int(event.x)
            y = int(event.y)
            time = event.time
            pthinfo = treeview.get_path_at_pos(x, y)
            if pthinfo != None:
                path, col, cellx, celly = pthinfo
                model = treeview.get_model()
                iter = model.get_iter(path)
                if model.iter_has_child(iter):
                    if model.iter_parent(iter) == None:
                        return 1
                treeview.grab_focus()
                treeview.set_cursor(path, col, 0)
                if model[path][3].Type == 'Both':
                    self.w('revertpopup').set_sensitive(True)
                else:
                    self.w('revertpopup').set_sensitive(False)
                self.w('popup').popup( None, None, None, event.button, time)
            return 1

    def on_properties_activate(self, *args):
        entry_iter = self.w('entries').get_selection().get_selected()[1]
        menu_iter = self.w('menus').get_selection().get_selected()[1]
        if entry_iter:
            self.setupEntryDialog(self.entry_store.get_value(entry_iter, 3))
        elif menu_iter:
            self.setupMenuDialog(self.menu_store.get_value(menu_iter, 3))

    def on_revertpopup_activate(self, *args):
        if self.entry_path:
            self.handler.revertEntry(self.entry_store[self.entry_path][3])
        elif self.menu_path:
            self.handler.revertMenu(self.menu_store[self.menu_path][3])
        gobject.timeout_add(120, self.reloadSmeg)

    def on_menus_cursor_changed(self, treeview):
        model, iter = treeview.get_selection().get_selected()
        self.menu_path = model.get_path(iter)
        self.entry_path = None
        self.w('entries').get_selection().unselect_all()
        self.getEntries(model.get_value(iter, 3))

    def on_entries_cursor_changed(self, treeview):
        model, iter = treeview.get_selection().get_selected()
        self.entry_path = model.get_path(iter)

    def on_newmenu_clicked(self, button):
        parent = 'Applications'
        if self.menu_path:
            parent = self.menu_store[self.menu_path][3]
        self.setupMenuDialog(parent=parent)

    def on_newentry_clicked(self, button):
        parent = 'Applications'
        if self.menu_path:
            parent = self.menu_store[self.menu_path][3]
        self.setupEntryDialog(parent=parent)

    def on_mainwindow_destroy(self, window):
        gtk.main_quit()

    def on_filequit_activate(self, menu):
        gtk.main_quit()

    def on_helpabout_activate(self, menu):
        about = gtk.AboutDialog()
        if self.icon:
            about.set_icon(self.icon)
            about.set_logo(self.icon)
        about.set_authors(['Travis Watkins <alleykat@gmail.com>'])
        about.set_name('Smeg')
        about.set_version(config.version)
        about.set_comments('Simple Menu Editor for GNOME')
        about.connect('response', lambda *a: about.hide())
        about.show()

    def on_preferences_activate(self, *args):
        de_list = {0: 'GNOME', 1: 'KDE', 2: 'XFCE'}
        de_store = gtk.ListStore(str)
        self.w('prefcombo').set_model(de_store)
        for key, value in de_list.iteritems():
            de_store.append([value,])
            if value == self.config['desktop_environment']:
                self.w('prefcombo').set_active(key)
        cell = gtk.CellRendererText()
        self.w('prefcombo').pack_start(cell, True)
        self.w('prefcombo').set_attributes(cell, text=0)
        self.w('prefcustomtheme').set_active(self.config['use_custom_theme'] or False)
        self.w('prefthemeentry').set_text(self.config['custom_theme_name'] or '')
        self.w('preferences').show()
        response = self.w('preferences').run()
        if response == gtk.RESPONSE_OK:
            de = self.w('prefcombo').get_active()
            self.config['desktop_environment'] = de_list[de]
            use_custom = self.w('prefcustomtheme').get_active()
            self.config['use_custom_theme'] = use_custom
            theme = self.w('prefthemeentry').get_text()
            self.config['custom_theme_name'] = theme
            self.handler.setWM(self.config['desktop_environment'])
            self.handler.getIconThemes()
            gobject.timeout_add(100, self.reloadSmeg)
        self.w('prefcombo').set_model(None)
        self.w('prefcombo').clear()
        self.w('preferences').hide()

    def on_preferences_delete_event(self, *args):
        self.w('preferences').hide()
        return True

    def on_mmoveup_clicked(self, button):
        if self.menu_path:
            menu = self.menu_store[self.menu_path][3]
            if self.menu_store.iter_parent(self.menu_store.get_iter(self.menu_path)) != None:
                self.handler.moveMenuUp(menu)
                gobject.timeout_add(100, self.reloadSmeg)

    def run(self):
        signals = {}
        for attr in dir(self):
            signals[attr] = getattr(self, attr)
        self.tree.signal_autoconnect(signals)

        self.setIcon()
        self.setupMenusTree()
        self.setupEntriesTree()
        self.getMenus()
        gtk.main()

def main():
    smeg = Smeg()
    smeg.run()

if __name__ == '__main__':
    main()
